@model LibraryOnlineSystem.Models.User

@{
    ViewBag.Title = "EditUser";
    Layout = "~/Views/Shared/_User_Layout.cshtml";
}
@*@section Scripts {*@
@*@Scripts.Render("~/bundles/jqueryval")*@
<script src="~/Scripts/globalize.js"></script>
<script src="~/Scripts/globalize.culture.fr-FR.js"></script>

<style>
    .bs-example {
        margin: 20px;
    }

    .icon-input-btn {
        display: inline-block;
        position: relative;
    }

        .icon-input-btn input[type="submit"] {
            padding-left: 2em;
        }

        .icon-input-btn .glyphicon {
            display: inline-block;
            position: absolute;
            left: 0.65em;
            top: 30%;
        }
</style>
<script>
    $(document).ready(function () {
        $(".icon-input-btn").each(function () {
            var btnFont = $(this).find(".btn").css("font-size");
            var btnColor = $(this).find(".btn").css("color");
            $(this).find(".glyphicon").css("font-size", btnFont);
            $(this).find(".glyphicon").css("color", btnColor);
            if ($(this).find(".btn-xs").length) {
                $(this).find(".glyphicon").css("top", "24%");
            }
        });
    });
</script>

<script>
    $.validator.methods.number = function (value, element) {
        return this.optional(element) ||
            !isNaN(Globalize.parseFloat(value));
    }
    $(document).ready(function () {
        Globalize.culture('fr-FR');
    });
</script>
<script>
    jQuery.extend(jQuery.validator.methods, {
        range: function (value, element, param) {
            //Use the Globalization plugin to parse the value
            var val = $.global.parseFloat(value);
            return this.optional(element) || (
                val >= param[0] && val <= param[1]);
        }
    });

</script>
<script>
    $(document).ready(function () {
        var now = new Date();
        var day = (@Model.DateOfBirth.Day.ToString().Length != 2) ? "0" + @Model.DateOfBirth.Day : @Model.DateOfBirth.Day;
        var month = (@Model.DateOfBirth.Month.ToString().Length != 2) ? "0" + @Model.DateOfBirth.Month : @Model.DateOfBirth.Month;
        var today = @Model.DateOfBirth.Year + "-" + (month) + "-" + (day);
        $('#DateOfBirthId').val(today);
    });
</script>
@* } *@
<h2 class="text-center" style="color:darkred;text-decoration:underline">EditUser :-</h2>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 style="color:darkred;text-decoration:underline">USER Details :-</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserId)
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control", id = "DateOfBirthId" } })
                        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HouseNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HouseNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HouseNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.HiddenFor(model => model.UserRole,
                    new Dictionary<string, object> { { "data-val", false } })

                @Html.HiddenFor(model => model.Password,
                    new Dictionary<string, object> { { "data-val", false } })

                <div class="form-group text-center">
                    <div class="col-md-offset-2 col-md-10">
                        <span class="icon-input-btn"><span class="glyphicon glyphicon-save"></span><input type="submit" value="Save" class="btn btn-primary" /></span>
                    </div>
                </div>

            </div>
            <div class="col-sm-2"></div>
        </div>



    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
@*This ^ blocks edit options*@
